{"ast":null,"code":"var _jsxFileName = \"/Users/kento/Desktop/dev/codedaylabs/stock-prediction/frontend/src/components/StockButton.js\";\nimport React from 'react';\nimport './StockButton.css';\nimport { Link } from 'react-router-dom'; //creating a reusable button \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STYLES = ['btn--primary', 'btn--outline']; //btn--primary is the one that's filled while btn--outline is just outlined\n\nconst SIZES = ['btn--medium', 'btn--large'];\nexport const StockButton = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]; //if it has a buttonStyle keep the buttonStyle the same if not set it to the first option in our STYLES array\n\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0]; //if the buttonsize already has a size return size if not make it medium button\n\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: \"/stockdata\",\n    className: \"btn-mobile\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `btn ${checkButtonStyle} ${checkButtonSize}`,\n      onClick: onClick,\n      type: type,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c = StockButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"StockButton\");","map":{"version":3,"sources":["/Users/kento/Desktop/dev/codedaylabs/stock-prediction/frontend/src/components/StockButton.js"],"names":["React","Link","STYLES","SIZES","StockButton","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;;;AAEA,MAAMC,MAAM,GAAG,CAAC,cAAD,EAAiB,cAAjB,CAAf,C,CAAiD;;AACjD,MAAMC,KAAK,GAAG,CAAC,aAAD,EAAgB,YAAhB,CAAd;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA,WAA1B;AAAuCC,EAAAA;AAAvC,CAAD,KAAwD;AAC/E,QAAMC,gBAAgB,GAAGR,MAAM,CAACS,QAAP,CAAgBH,WAAhB,IAA+BA,WAA/B,GAA6CN,MAAM,CAAC,CAAD,CAA5E,CAD+E,CACE;;AAEjF,QAAMU,eAAe,GAAGT,KAAK,CAACQ,QAAN,CAAeF,UAAf,IAA6BA,UAA7B,GAA0CN,KAAK,CAAC,CAAD,CAAvE,CAH+E,CAGJ;;AAE3E,sBACI,QAAC,IAAD;AAAM,IAAA,EAAE,EAAC,YAAT;AAAsB,IAAA,SAAS,EAAC,YAAhC;AAAA,2BACI;AAAQ,MAAA,SAAS,EAAG,OAAMO,gBAAiB,IAAGE,eAAgB,EAA9D;AAAiE,MAAA,OAAO,EAAEL,OAA1E;AAAmF,MAAA,IAAI,EAAED,IAAzF;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAbM;KAAMD,W","sourcesContent":["import React from 'react';\nimport './StockButton.css';\nimport { Link } from 'react-router-dom';\n\n//creating a reusable button \n\nconst STYLES = ['btn--primary', 'btn--outline']; //btn--primary is the one that's filled while btn--outline is just outlined\nconst SIZES = ['btn--medium', 'btn--large'];\n\nexport const StockButton = ({children, type, onClick, buttonStyle, buttonSize}) => {\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]; //if it has a buttonStyle keep the buttonStyle the same if not set it to the first option in our STYLES array\n\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0] //if the buttonsize already has a size return size if not make it medium button\n\n    return (\n        <Link to='/stockdata' className='btn-mobile'>\n            <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick={onClick} type={type}>\n                {children}\n            </button>\n        </Link>\n    )\n\n};"]},"metadata":{},"sourceType":"module"}